[{"path":"https://cityriverspaces.github.io/CRiSp/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to CRiSp","title":"Contributing to CRiSp","text":"outlines propose change CRiSp. detailed discussion contributing packages, please see tidyverse development contributing guide code review principles.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to CRiSp","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to CRiSp","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to CRiSp","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"CityRiverSpaces/CRiSp\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to CRiSp","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to CRiSp","text":"Please note CRiSp project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://cityriverspaces.github.io/CRiSp/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://cityriverspaces.github.io/CRiSp/articles/corridor-delineation.html","id":"setting-the-area-of-interest","dir":"Articles","previous_headings":"","what":"Setting the area of interest","title":"2. Corridor delineation","text":"","code":"# Get the bounding box from the Nominatim API provided by OSM. bb <- getbb(city_name) aoi <- define_aoi(bb, epsg_code, bbox_buffer) city_boundary <- osmdata_as_sf(\"place\", \"city\", bb)$osm_multipolygons |>   st_transform(epsg_code) |>   st_geometry()"},{"path":"https://cityriverspaces.github.io/CRiSp/articles/corridor-delineation.html","id":"constructing-the-initial-corridor","dir":"Articles","previous_headings":"","what":"Constructing the initial corridor","title":"2. Corridor delineation","text":"features can now delineate theoretical river corridor representing maximum area river reached within walking distance. construct initial corridor merged geometries river_centerline river_surface, buffer 500m around : can now plot initial corridor:","code":"river_centerline <- osmdata_as_sf(\"waterway\", \"river\", bb)$osm_multilines |>   filter(name == river_name) |>   st_transform(epsg_code) |>   st_geometry() |>   st_intersection(st_buffer(aoi, bbox_buffer))  river_surface <- osmdata_as_sf(\"natural\", \"water\", bb) river_surface <- river_surface$osm_multipolygons |>   bind_rows(river_surface$osm_polygons) |>   st_transform(epsg_code) |>   st_filter(river_centerline, .predicate = st_intersects) |>   st_geometry() |>   st_union() corridor_buffer <- 500 corridor_initial <- c(river_centerline, river_surface) |>   st_buffer(corridor_buffer) |>   st_union() plot(city_boundary) plot(corridor_initial,      border = \"red\",      main = \"Initial river corridor\",      add = TRUE)"},{"path":"https://cityriverspaces.github.io/CRiSp/articles/corridor-delineation.html","id":"getting-the-street-network","dir":"Articles","previous_headings":"","what":"Getting the street network","title":"2. Corridor delineation","text":"Querying Overpass API highway key: split area interest two parts using river centreline separator. two areas can used split network two preparation shortest path algorithm used edge delineation next step:","code":"highway_values <- c(\"motorway\", \"primary\", \"secondary\", \"tertiary\") streets <- osmdata_as_sf(\"highway\", highway_values, bb) streets <- merge_streets(streets) |>   select(\"highway\") #> Warning in st_cast.sf(highways$osm_polygons, \"LINESTRING\"): repeating #> attributes for all sub-geometries for which they may not be constant aoi_split <- aoi |>   split_aoi(river_centerline)  net <- create_network(streets, epsg_code)  net_1 <- net |>   trim_network(aoi_split[1], corridor_initial) |>   clean_network() |>   calc_weights() |>   sfnetworks::activate(\"nodes\") |>   filter(tidygraph::group_components() == 1) #> Warning: to_spatial_subdivision assumes attributes are constant over geometries  net_2 <- net |>   trim_network(aoi_split[2], corridor_initial) |>   clean_network() |>   calc_weights() |>   sfnetworks::activate(\"nodes\") |>   filter(tidygraph::group_components() == 1) #> Warning: to_spatial_subdivision assumes attributes are constant over geometries"},{"path":"https://cityriverspaces.github.io/CRiSp/articles/corridor-delineation.html","id":"corridor-edge-delineation","dir":"Articles","previous_headings":"","what":"Corridor edge delineation","title":"2. Corridor delineation","text":"Determine “vertices” initial river corridor intersections initial river corridor AoI boundary. use points extremes corridor edges:","code":"vertices_1 <- get_vertices(aoi_split[1], corridor_initial |>                              st_cast(\"LINESTRING\")) vertices_2 <- get_vertices(aoi_split[2], corridor_initial |>                              st_cast(\"LINESTRING\")) corridor_edge_1 <- get_corridor_edge(net_1, aoi_split[1], vertices_1) corridor_edge_2 <- get_corridor_edge(net_2, aoi_split[2], vertices_2)  corridor_edges <- st_union(corridor_edge_1, corridor_edge_2)"},{"path":"https://cityriverspaces.github.io/CRiSp/articles/corridor-delineation.html","id":"capping-the-corridor","dir":"Articles","previous_headings":"","what":"Capping the corridor","title":"2. Corridor delineation","text":"Note ideal, municipal boundaries can arbitrary might exclude important end features corridors, user option input feature cap corridor ends. case Bucharest, can ring road.","code":"capped_corridor <- city_boundary |>   lwgeom::st_split(corridor_edges) |>   sf::st_collection_extract(\"POLYGON\") |>   sf::st_as_sf() |>   sf::st_filter(river_centerline, .predicate = sf::st_intersects)  # TODO replace with call to cap_corridor() corridor <- cap_corridor(corridor_edges, river_centerline, epsg_code, bb)"},{"path":"https://cityriverspaces.github.io/CRiSp/articles/corridor-delineation.html","id":"all-in-one","dir":"Articles","previous_headings":"","what":"All in one","title":"2. Corridor delineation","text":"delineate_corridor() function carries entire delineation one step returns list default contains following output elements: corridor, segments, riverspace. Although included default, used input objects river_line, river_polygon, buildings can also included resulting object. initial corridor boundary, either buffer valley edges derived digital elevation model, can also included output object.","code":"# TODO this function should run the entire urc delineation process in one step urc <- delineate_corridor(city_name, river_name,                           segments = TRUE, riverspace = TRUE)  # `$corridor` of the resulting object is an sf polygon representing the corridor urc$corridor  # `$segments` is an sf polygon representing the segments of the corridor, # TODO make sure the segments are numbered from upstream to downstream urc$segments  # `$riverspace` is an sf polygon representing the delineated river space urc$riverspace  # All three elements of delineation plot(urc$riverspace, col = \"green\") plot(urc$river, col = \"blue\") plot(urc$segments, col = \"lightblue\", add = TRUE) plot(urc$corridor, add = TRUE, col = \"red\", wt = 2, add = TRUE)"},{"path":"https://cityriverspaces.github.io/CRiSp/articles/multiple-cities.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"5. Multiple cities","text":"Comparative analysis can shed light patterns visible single case. automated delineation provided CRiSp allows reliable frame reference comparisons, including: cities along large river; river-crossed cities given size; cities crossed rivers kind given region. can use delineate_corridor() function repeatedly extract data multiple cities rivers, subsequently compare . vignette demonstrates perform analysis using CRiSp.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/articles/multiple-cities.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"5. Multiple cities","text":"focus following five cities rivers:","code":"cities <- c(\"Bucharest, Romania\", \"Vienna, Austria\", \"Paris, France\",             \"London, United Kingdom\", \"Berlin, Germany\") rivers <- c(\"Dâmbovița\", \"Wienfluss\", \"Seine\", \"Thames\", \"Spree\")"},{"path":"https://cityriverspaces.github.io/CRiSp/articles/multiple-cities.html","id":"delineation","dir":"Articles","previous_headings":"","what":"Delineation","title":"5. Multiple cities","text":"can use map2() function form purrr package iterate cities rivers extract corridor boundaries. can skip parts delineation passing respective parameters purrrr::map2() function. skip riverspace delineation case (.e. riverspace = FALSE). result list delineated corridors.","code":"corridors <- purrr::map2(cities, rivers, delineate_corridor, riverspace = FALSE) corridors[[1]]"},{"path":"https://cityriverspaces.github.io/CRiSp/articles/multiple-cities.html","id":"validation","dir":"Articles","previous_headings":"","what":"Validation","title":"5. Multiple cities","text":"can validate results either plotting corridors city checking delineation resulted empty geometries. former can quick way validate small number cities, latter better suited larger number cases requires automated tests identify exact causes missing geometries.","code":"purrr::map(corridors, ~ .x |> st_is_empty())"},{"path":"https://cityriverspaces.github.io/CRiSp/articles/multiple-cities.html","id":"parallelisation","dir":"Articles","previous_headings":"","what":"Parallelisation","title":"5. Multiple cities","text":"Analysing multiple cities CRiSp fashion can quickly become computationally expensive. However, analysis required city independent cities, can improve wall-time computation (.e. time must wait results), using furrr package map execute analysis functions city parallel.","code":"future::plan(multisession) corridors <- furrr::future_map2(cities, rivers, delineate_corridor)"},{"path":"https://cityriverspaces.github.io/CRiSp/articles/poi-study-area.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"6. Study area around POI","text":"article explore delineate study area around point interest (POI) using Bucharest study area. choose location along River Dâmbovița. POI represented point WGS84 coordinate reference system. delineate_segment() takes POI input. default, tries identify city river closest . Alternatively, can take already delineated corridor street network input. use built-data bucharest_corridor bucharest_streets. also takes care CRS transformations needed. Optionally, can also generate riverspace. output list object three elements: $poi, $segment $riverspace.","code":"poi <- st_sfc(st_point(c(26.074123, 44.432875)), crs = 4326) segment_poi <- delineate_segment(poi, bucharest_corridor, bucharest_streets,                                  riverspace = TRUE) plot(segment_poi$riverspace, col = \"lightblue\") plot(segment_poi$segment, col = \"blue\", add = TRUE) plot(segment_poi$poi, col = \"red\", size = 3, add = TRUE)"},{"path":"https://cityriverspaces.github.io/CRiSp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Claudiu Forgaci. Author, maintainer. Francesco Nattino. Author. Netherlands eScience Center. Funder.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Forgaci C, Nattino F (2024). CRiSp: Automate Delineation Urban River Spaces. R package version 0.0.0.9000, https://cityriverspaces.github.io/CRiSp/.","code":"@Manual{,   title = {CRiSp: Automate the Delineation of Urban River Spaces},   author = {Claudiu Forgaci and Francesco Nattino},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://cityriverspaces.github.io/CRiSp/}, }"},{"path":"https://cityriverspaces.github.io/CRiSp/index.html","id":"crisp","dir":"","previous_headings":"","what":"Automate the Delineation of Urban River Spaces","title":"Automate the Delineation of Urban River Spaces","text":"CRiSp (City River Spaces) provides tools automate morphological delineation riverside urban areas.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Automate the Delineation of Urban River Spaces","text":"can install development version CRiSp GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"CityRiverSpaces/CRiSp\")"},{"path":"https://cityriverspaces.github.io/CRiSp/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Automate the Delineation of Urban River Spaces","text":"basic example shows solve common problem:","code":"library(CRiSp) ## basic example code"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/calc_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the weights of the edges of a network based on their length — calc_weights","title":"Calculate the weights of the edges of a network based on their length — calc_weights","text":"Calculate weights edges network based length","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/calc_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the weights of the edges of a network based on their length — calc_weights","text":"","code":"calc_weights(net)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/calc_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the weights of the edges of a network based on their length — calc_weights","text":"net network object","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/calc_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the weights of the edges of a network based on their length — calc_weights","text":"network object new column 'weight' containing length edges","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/cap_corridor.html","id":null,"dir":"Reference","previous_headings":"","what":"Cap corridor edges with a city boundary. — cap_corridor","title":"Cap corridor edges with a city boundary. — cap_corridor","text":"Cap corridor edges city boundary.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/cap_corridor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cap corridor edges with a city boundary. — cap_corridor","text":"","code":"cap_corridor(corridor_edges, river, crs, bb, cap = \"city\")"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/cap_corridor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cap corridor edges with a city boundary. — cap_corridor","text":"corridor_edges Edge corridor simple feature river River centerline simple feature crs coordinate reference system epsg code, e.g. 4326 WGS84 bb bounding box matrix 4 elements: xmin, ymin, xmax, ymax cap Character string type cap used. Default \"city\"","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/cap_corridor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cap corridor edges with a city boundary. — cap_corridor","text":"simple feature geometry","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/clean_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean a street network by subdividing edges and removing pseudo-nodes. — clean_network","title":"Clean a street network by subdividing edges and removing pseudo-nodes. — clean_network","text":"Clean street network subdividing edges removing pseudo-nodes.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/clean_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean a street network by subdividing edges and removing pseudo-nodes. — clean_network","text":"","code":"clean_network(net)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/clean_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean a street network by subdividing edges and removing pseudo-nodes. — clean_network","text":"net network object","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/clean_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean a street network by subdividing edges and removing pseudo-nodes. — clean_network","text":"cleaned network object","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/create_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a network from a line strings — create_network","title":"Create a network from a line strings — create_network","text":"Create network line strings","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/create_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a network from a line strings — create_network","text":"","code":"create_network(data, crs = NULL)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/create_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a network from a line strings — create_network","text":"data data frame column named 'highway' containing line strings crs coordinate reference system epsg code, e.g. 4326 WGS84","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/create_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a network from a line strings — create_network","text":"network object","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/define_aoi.html","id":null,"dir":"Reference","previous_headings":"","what":"Define an area of interest (AoI) from a bounding box and a coordinate reference system (CRS). — define_aoi","title":"Define an area of interest (AoI) from a bounding box and a coordinate reference system (CRS). — define_aoi","text":"Define area interest (AoI) bounding box coordinate reference system (CRS).","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/define_aoi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define an area of interest (AoI) from a bounding box and a coordinate reference system (CRS). — define_aoi","text":"","code":"define_aoi(bb, crs, buffer_dist = 0)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/define_aoi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define an area of interest (AoI) from a bounding box and a coordinate reference system (CRS). — define_aoi","text":"bb bounding box matrix 4 elements: xmin, ymin, xmax, ymax crs coordinate reference system epsg code, e.g. 4326 WGS84 buffer_dist numeric value buffer area interest","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/define_aoi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define an area of interest (AoI) from a bounding box and a coordinate reference system (CRS). — define_aoi","text":"area interest simple feature geometry","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/delineate_corridor.html","id":null,"dir":"Reference","previous_headings":"","what":"Delineate a corridor around a river. — delineate_corridor","title":"Delineate a corridor around a river. — delineate_corridor","text":"Delineate corridor around river.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/delineate_corridor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delineate a corridor around a river. — delineate_corridor","text":"","code":"delineate_corridor(place, river, crs)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/delineate_corridor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delineate a corridor around a river. — delineate_corridor","text":"place place name string river river name string crs coordinate reference system epsg code, e.g. 4326 WGS84","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/delineate_corridor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delineate a corridor around a river. — delineate_corridor","text":"simple feature geometry","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_corridor_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the corridor edge on the network. — get_corridor_edge","title":"Determine the corridor edge on the network. — get_corridor_edge","text":"Find corridor edge one side river using shortest path algorithm.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_corridor_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the corridor edge on the network. — get_corridor_edge","text":"","code":"get_corridor_edge(net, area, vertices)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_corridor_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the corridor edge on the network. — get_corridor_edge","text":"net network object area area interest simple feature vertices simple feature geometry set two points","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_corridor_edge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the corridor edge on the network. — get_corridor_edge","text":"simple feature geometry","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_latlon.html","id":null,"dir":"Reference","previous_headings":"","what":"Add latitude and longitude information to an sf object — get_latlon","title":"Add latitude and longitude information to an sf object — get_latlon","text":"Add latitude longitude information sf object (WGS84)","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_latlon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add latitude and longitude information to an sf object — get_latlon","text":"","code":"get_latlon(x)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_latlon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add latitude and longitude information to an sf object — get_latlon","text":"x Object class sf, sfc sfg","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_latlon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add latitude and longitude information to an sf object — get_latlon","text":"sf object latitude longitude","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_osm_city_boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the city boundary from OpenStreetMap — get_osm_city_boundary","title":"Get the city boundary from OpenStreetMap — get_osm_city_boundary","text":"Get city boundary OpenStreetMap","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_osm_city_boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the city boundary from OpenStreetMap — get_osm_city_boundary","text":"","code":"get_osm_city_boundary(city_name)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_osm_city_boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the city boundary from OpenStreetMap — get_osm_city_boundary","text":"city_name character string name city","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_osm_city_boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the city boundary from OpenStreetMap — get_osm_city_boundary","text":"sf object city boundary","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_osm_city_boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the city boundary from OpenStreetMap — get_osm_city_boundary","text":"","code":"get_osm_city_boundary(\"Bucharest\") #> Geometry set for 1 feature  #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 25.96667 ymin: 44.33425 xmax: 26.22558 ymax: 44.5414 #> Geodetic CRS:  WGS 84 #> MULTIPOLYGON (((26.08815 44.36924, 26.08864 44...."},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_osmdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve OpenStreetMap data for a given location — get_osmdata","title":"Retrieve OpenStreetMap data for a given location — get_osmdata","text":"Retrieve OpenStreetMap data given location","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_osmdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve OpenStreetMap data for a given location — get_osmdata","text":"","code":"get_osmdata(name, key, value)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_osmdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve OpenStreetMap data for a given location — get_osmdata","text":"name character string name place retrieve bounding box key character string key filter data value character string value filter data","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_osmdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve OpenStreetMap data for a given location — get_osmdata","text":"sf object retrieved OpenStreetMap data given location","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_osmdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve OpenStreetMap data for a given location — get_osmdata","text":"","code":"get_osmdata(\"Bucharest\", \"waterway\", \"river\") #> Object of class 'osmdata' with: #>                  $bbox : 44.3342466,25.9666745,44.5413964,26.2255768 #>         $overpass_call : The call submitted to the overpass API #>                  $meta : metadata including timestamp and version numbers #>            $osm_points : 'sf' Simple Features Collection with 12518 points #>             $osm_lines : 'sf' Simple Features Collection with 102 linestrings #>          $osm_polygons : 'sf' Simple Features Collection with 0 polygons #>        $osm_multilines : 'sf' Simple Features Collection with 4 multilinestrings #>     $osm_multipolygons : NULL"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_osmdata_river_corridor.html","id":null,"dir":"Reference","previous_headings":"","what":"Get OpenStreetMap data for a river corridor — get_osmdata_river_corridor","title":"Get OpenStreetMap data for a river corridor — get_osmdata_river_corridor","text":"Get OpenStreetMap data river corridor","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_osmdata_river_corridor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get OpenStreetMap data for a river corridor — get_osmdata_river_corridor","text":"","code":"get_osmdata_river_corridor(city_name, river_name, epsg_code, buffer_dist)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_osmdata_river_corridor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get OpenStreetMap data for a river corridor — get_osmdata_river_corridor","text":"city_name character string name place retrieve bounding box river_name character string name river epsg_code integer EPSG code projection buffer_dist numeric buffer distance meters water stream","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_osmdata_river_corridor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get OpenStreetMap data for a river corridor — get_osmdata_river_corridor","text":"sf object river corridor","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_target_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Get start and end points of corridor edge on the network. — get_target_points","title":"Get start and end points of corridor edge on the network. — get_target_points","text":"TODO add description","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_target_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get start and end points of corridor edge on the network. — get_target_points","text":"","code":"get_target_points(vertices, area, threshold = 0.001)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_target_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get start and end points of corridor edge on the network. — get_target_points","text":"vertices simple feature geometry set two points area area interest simple feature threshold numeric value","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_target_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get start and end points of corridor edge on the network. — get_target_points","text":"simple feature geometry set two points","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_vertices.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the end vertices of the initial river corridor. — get_vertices","title":"Determine the end vertices of the initial river corridor. — get_vertices","text":"Determine \"vertices\" initial river corridor intersections initial river corridor AoI boundary.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_vertices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the end vertices of the initial river corridor. — get_vertices","text":"","code":"get_vertices(aoi, corridor_initial)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_vertices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the end vertices of the initial river corridor. — get_vertices","text":"aoi Area interest simple feature corridor_initial Initial river corridor simple feature","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/get_vertices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the end vertices of the initial river corridor. — get_vertices","text":"simple feature geometry set two points","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/merge_streets.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge streets from polygons and lines — merge_streets","title":"Merge streets from polygons and lines — merge_streets","text":"Merge streets polygons lines","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/merge_streets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge streets from polygons and lines — merge_streets","text":"","code":"merge_streets(highways)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/merge_streets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge streets from polygons and lines — merge_streets","text":"highways list object containing streets OpenStreetMap","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/merge_streets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge streets from polygons and lines — merge_streets","text":"data frame column named 'highway' containing line strings","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/not_intersects.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if two sf objects do not intersect — not_intersects","title":"Check if two sf objects do not intersect — not_intersects","text":"Check two sf objects intersect","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/not_intersects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if two sf objects do not intersect — not_intersects","text":"","code":"not_intersects(x, y)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/not_intersects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if two sf objects do not intersect — not_intersects","text":"x sf object y sf object","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/not_intersects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if two sf objects do not intersect — not_intersects","text":"logical vector","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/osmdata_as_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve OpenStreetMap data as sf object — osmdata_as_sf","title":"Retrieve OpenStreetMap data as sf object — osmdata_as_sf","text":"Query Overpass API key:value pair within given bounding box.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/osmdata_as_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve OpenStreetMap data as sf object — osmdata_as_sf","text":"","code":"osmdata_as_sf(key, value, bb)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/osmdata_as_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve OpenStreetMap data as sf object — osmdata_as_sf","text":"key character string key filter data value character string value filter data bb list bounding box","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/osmdata_as_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve OpenStreetMap data as sf object — osmdata_as_sf","text":"sf object retrieved OpenStreetMap data","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/simplify_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify a street network by removing multiple edges and loops. — simplify_network","title":"Simplify a street network by removing multiple edges and loops. — simplify_network","text":"Simplify street network removing multiple edges loops.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/simplify_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify a street network by removing multiple edges and loops. — simplify_network","text":"","code":"simplify_network(net)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/simplify_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify a street network by removing multiple edges and loops. — simplify_network","text":"net network object","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/simplify_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplify a street network by removing multiple edges and loops. — simplify_network","text":"simplifed network object","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/split_aoi.html","id":null,"dir":"Reference","previous_headings":"","what":"Split the area of interest (AoI) by a river. — split_aoi","title":"Split the area of interest (AoI) by a river. — split_aoi","text":"Split area interest (AoI) river.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/split_aoi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split the area of interest (AoI) by a river. — split_aoi","text":"","code":"split_aoi(aoi, river)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/split_aoi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split the area of interest (AoI) by a river. — split_aoi","text":"aoi Area interest simple feature river River simple feature","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/split_aoi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split the area of interest (AoI) by a river. — split_aoi","text":"simple feature geometry set two areas interest","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/trim_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim a network to an area of interest (AoI) and a river corridor. — trim_network","title":"Trim a network to an area of interest (AoI) and a river corridor. — trim_network","text":"Trim network area interest (AoI) river corridor.","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/trim_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim a network to an area of interest (AoI) and a river corridor. — trim_network","text":"","code":"trim_network(net, area, river_corridor)"},{"path":"https://cityriverspaces.github.io/CRiSp/reference/trim_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim a network to an area of interest (AoI) and a river corridor. — trim_network","text":"net network object area area interest simple feature river_corridor river corridor simple feature","code":""},{"path":"https://cityriverspaces.github.io/CRiSp/reference/trim_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim a network to an area of interest (AoI) and a river corridor. — trim_network","text":"network object","code":""}]
