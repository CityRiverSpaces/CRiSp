% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/corridor.R
\name{delineate_corridor}
\alias{delineate_corridor}
\title{Delineate a river corridor on a spatial network.}
\usage{
delineate_corridor(
  network,
  river,
  max_width = 3000,
  initial_method = "valley",
  buffer = NULL,
  dem = NULL,
  max_iterations = 10,
  capping_method = "shortest-path"
)
}
\arguments{
\item{network}{The spatial network to be used for the delineation}

\item{river}{A (MULTI)LINESTRING simple feature geometry representing the
river centerline}

\item{max_width}{(Approximate) maximum width of the corridor. The spatial
network is trimmed by a buffer region of this size around the river}

\item{initial_method}{The method employed to define the initial river
corridor geometry. See \code{\link[=initial_corridor]{initial_corridor()}} for the available methods}

\item{buffer}{Initial width of the corridor (only used if \code{initial_method}
is \code{"buffer"})}

\item{dem}{Digital elevation model (DEM) of the region (only used if
\code{initial_method} is \code{"valley"}) as a \code{\link[terra:SpatRaster-class]{terra::SpatRaster}} object}

\item{max_iterations}{Maximum number of iterations employed to refine the
corridor edges (see \code{\link[=corridor_edge]{corridor_edge()}}).}

\item{capping_method}{The method employed to connect the corridor edge end
points (i.e. to "cap" the corridor). See \code{\link[=cap_corridor]{cap_corridor()}} for
the available methods}
}
\value{
A simple feature geometry representing the river corridor
}
\description{
The corridor edges on the two river banks are drawn on the provided spatial
network starting from an initial guess of the corridor (based e.g. on the
river valley).
}
\examples{
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
if (!requireNamespace("CRiSpData", quietly = TRUE)) {
  message("Install CRiSpData from GitHub to run this example.")
} else {
  network <- rbind(CRiSpData::bucharest_osm$streets,
                   CRiSpData::bucharest_osm$railways) |>
    as_network()
  crs <- get_utm_zone(CRiSpData::bucharest_osm$bb)
  aoi <- reproject(CRiSpData::bucharest_osm$bb, crs)
  delineate_corridor(network,
                     CRiSpData::bucharest_osm$river_centerline,
                     aoi,
                     dem = terra::unwrap(CRiSpData::bucharest_dem))
}
\dontshow{\}) # examplesIf}
}
